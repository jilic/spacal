
***************************************
*Geting and building the code (lxplus)*
***************************************

This is the procedure for compiling and running Geant4 spacal code on lxplus machines with 64-bit SLC6.

1) All the necessary libraries and compiler versions are already installed on lxplus machines running 64-bit SLC6, 
thus after logging on, like this:

> ssh lxplus6.cern.ch
 
you just need to source the following scripts and to set the following variables to setup an appropriate environment:

> export SCRAM_ARCH=x86_64-slc6-gcc46
> source /afs/cern.ch/sw/lcg/contrib/gcc/4.6/x86_64-slc6/setup.sh
> source /afs/cern.ch/sw/lcg/external/geant4/9.6.p03/x86_64-slc6-gcc46-opt/CMake-setup.sh
> export CXX=`which g++`; export CC=`which gcc`

You can also put those commands in a script and launch the script on startup (i.e. calling it in .bashrc)


2) make a dir where you want to put the code, say G4_spacal

> mkdir G4_spacal
> cd G4_spacal

3)get the code 

>svn checkout http://spacal.googlecode.com/svn/trunk/ spacalCode

this will download the code and place it in a dir *spacalCode* 

4) make a build directory

> mkdir build
> cd build
> mkdir spacalCode
> cd spacalCode

5) build using cmake

> cmake -DGeant4_DIR=/afs/cern.ch/sw/lcg/external/geant4/9.6.p03/x86_64-slc6-gcc46-opt/lib64/Geant4-9.6.3 ../../spacalCode
CMake will now run to configure the build and generate Makefiles
-----
Note1: If you do not want to type this long path,  in your .bashrc  set a variable, say g4Dir:

export g4Dir="/afs/cern.ch/sw/lcg/external/geant4/9.6.p03/x86_64-slc6-gcc46-opt/lib64/Geant4-9.6.3"

than you can run cmake as:
> cmake -DGeant4_DIR=$g4Dir /path_to/your_source_code/
-----

6) When cmake finishes we can now build by simply running make:

> make 
or if your machine has more than 1 core processor

>make -jN

where N is the number of core processors

7) now you are ready to run

> ./SPc -m beam_circ.mac


This will run the macro beam_circ.mac. 

Note2) In the code (release 11) the tracking of optical photons is switched off.


**********
*Geometry*
**********
- A tungsten block with a number of holes filled with the quartz tubes filled with a liquid scintillator.
- The number of holes is automatically calculated from the value of pitch.
- The quartz tubes and capillaries are placed using G4PVParametrization
- A small gap between the tubes and tungsten block 
- At the front of the calo block a thin Al mirror is placed
- In front of the mirror there is a tungsten preshower (thickness 1X0). To remove preshower set it's material to be vacuum.
- The PMTs are coded as well. They are square shaped. They can be switched on or off by setting the values 
	of parameters fNx and fNy (if set to 0 PMTs will not be constructed). Dimensions and placement of PMTs have 
	to be adjusted for different pitches so they do not cross the quartz tubes. 
- Magnetic field of 3.8 T (0,0, 3.8T). Set Bz=0 if you want to switch it off or comment the call of ConstructField() in ConstructDetector() method 

***********************************
*Modifying the geometry at runtime*
***********************************
You can modify the geometry definition at runtime. This
is accomplished through DetectorMessenger, a derived class of G4UImessenger.
After changing geometry using commands from DetectorMessenger the /SPc/detector/update command must be issued to reconstruct the geometry
with the new values. Right now there are a just 2 things you can change at the runtime
	-dice5 or dice4 (dice5 is not coded yet!!!)
	-pmtZDist
I wrote this class just as a test, it works and if you need some geometry parameter to be changed at runtime 
just add appropriate Set functions in DetectorMessenger and DetectorConstruction. 


************************
*PMT sensitive detector*
************************
The PMT sensitive detector cannot be triggered like a normal sensitive detector
because the sensitive volume does not allow photons to pass through it. Rather,
it detects them in the OpBoundary process based on an efficiency set on the
skin of the volume.

*********************************
*Scintillator sensitive detector*
*********************************
This one we need to measure energy deposited in the scintillator


**********************
*Modular Physics List*
**********************
Using a modular physics list is an easy way to organise the physics list into
categories for easier maintenance. Here I used GeneralPhysics, EMPhysics and OpticalPhysics. 

******
*Beam*
******
I use GPS source. In the code you can choose between 3deg tilted beam and a parallel to the z axes of calo block. Look at PrimaryGeneratorAction.cc 
Change energy of incident electrons using SetMonoEnergy(energy); 

************************
*Histograms and ntuples*
************************

Look at HistoManager, SPcEventAction and SPcSteppingAction classes. There are a number of things calculated during the runtime and they are 
written in a few ntuples. To chose the name of the output root file and what is going to be written in it, in your macro add something as following:

#
/SPc/histo/name test1
/SPc/histo/event true
/SPc/histo/pp true
/SPc/histo/lost false
#

Here the output root file will be test1.root, the event ntuple will be written, pp (primary particle) ntuple will be written, but information about 
particles exiting the calo block (lost) will not.

******
*Run*
*****

I have added an option to choose the run number. In your macro add a line:

/SPc/setRun someInt

It comes handy when you have to submit a number of jobs to run on condor.

*****************
*Optical Photons*
*****************

If you are looking at the things such as energy deposition in tungsten, X0 or Moliere, tracking optical photons increases the running time immensely 
(for 1 MeV deposited in the scintillator 11500 optical photons is produced). In this case the best is to kill the optical photons as soon as they are 
produced. You will still have information how many of them has been produced per event. To kill the optical photons go to SPcStackingAction.cc and 
change the value of G4ClassificationOfNewTrack that is returned by ClassifyNewTrack. 

***************************************
*Optical Photons at optical boundaries*
***************************************

If you want to track optical photons and extract information about processes at the optical boundaries in SPcSteppingAction.cc set the value of parameter 
"scintill" to be true; Do not forget to set G4ClassificationOfNewTrack, returned by ClassifyNewTrack, in SPcStackingAction.cc to be fUrgent for scintillation 
photons (and Cherenkov as well if you want to see what is happening with them).



